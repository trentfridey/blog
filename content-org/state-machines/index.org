#+TITLE: State Machines with XState 
#+AUTHOR: Trent Fridey
#+DATE: 2020-11-14
#+HUGO_TAGS: javascript front-end programming
#+HUGO_DRAFT: true
#+HUGO_BASE_DIR: ~/trent/blog
#+HUGO_SECTION: posts/state-machines
#+STARTUP: latexpreview

* TODO Introduction to State Machines

The formal specification of a finite state machine requires 5 parts:

1. The set of states $S$
2. The set of events $\Sigma$
3. The set of valid transitions $\delta: S\times\Sigma \to S$
4. The initial state $s_0$
5. The set of final states $F$

** Example

   To illustrate this, let's consider a simple state machine with the following specification:

   \begin{aligned}
   S &= \{ A, B, C, D \} \\
   \Sigma &= \{ e_1, e_2, e_3, e_4, e_5 \} \\
   s_0 &= A \\
   F &= \{  D \}
   \end{aligned}

   and transition function $\delta$:

|   | e_1 | e_2 | e_3 | e_4 | e_5 |
|---+-----+-----+-----+-----+-----|
| A | B   |     |     |     |     |
| B |     | C   |     |     |     |
| C |     |     | D   | A   | B   |
| D |     |     |     |     |     |
   
We can visualize this FSM using a graph produced with the ~graphviz~ library:

#+begin_src dot :exports file :file "example.svg"
  digraph G {
    rankdir="LR"
    A -> B[label="e_1"]
    B -> C[label="e_2"]
    C -> D[label="e_3"]
    C -> A[label="e_4"]
    C -> B[label="e_5"]
  }
#+end_src

#+RESULTS:
[[file:example.svg]]


* TODO Statecharts: an Extension to State Machines

Statecharts are a group of extensions to state machines, that augment the features of state machines to make them easier to model.
These areas include hierarchy, concurrency, and communication.
Namely, in statecharts, you can have:

- Hierarchical states
- Orthogonal states
- History states

or

statecharts = state-diagrams + depth + orthogonality + broadcast-communication


* TODO An Example

Tracking a feature in software development from initialization to deployment

Represent it as a graph

* TODO Implementing the Example with XState

  XState is a Javascript library for implementing state machines in the browser.
  Actually it implements state charts (an extension of state machines)
  It is great because it follows a specification that has been sitting around for years as SCXML.

  It allows us to generate an interactive representation of the state machine with ~xstate-vis~.

** TODO The Implementation 
   Include link to code sandbox?

  
* Notes

  
Constructing a hieararch
